'use strict';

// The OAuth token was generated by boss-robot with the public_repo
// scope. It's used to boost the request rate limit from 60/hour to
// 5000/hour.
var gh = new Octokit({token: "8ed50783e7dd02093cf43293f3c7f85386fb576a"});

var repos = {
    'TES IV: Oblivion': {owner: 'boss-developers', repo: 'oblivion'},
    "Nehrim - At Fate's Edge": {owner: 'boss-developers', repo: 'nehrim'},
    'TES V: Skyrim': {owner: 'boss-developers', repo: 'skyrim'},
    'Fallout 3': {owner: 'boss-developers', repo: 'fallout3'},
    'Fallout: New Vegas': {owner: 'boss-developers', repo: 'falloutnv'},
};

var pluginName = '';
var comment = '';
function isStorageSupported(){
	try {
		return ('localStorage' in window && window['localStorage'] !== null && window['localStorage'] !== undefined);
	} catch (e) {
		return false;
	}
}
function isPluginSubmitSupported(){
	return ('withCredentials' in new XMLHttpRequest && typeof(JSON) === 'object' && typeof(JSON.parse) === 'function');
}
function isValidationSupported(){
	return ('checkValidity' in document.createElement('form'));
}
function storeData(key, value){
	try {
		localStorage.setItem(key, value);
	} catch (e) {
		if (e == QUOTA_EXCEEDED_ERR) {
			alert(txt8);
		}
	}
}
function showElement(element){
	if (element != null){
		if (element.className.indexOf('hidden') != -1) {
			element.className = element.className.replace('hidden','');
		} else if (element.className.indexOf('visible') == -1) {
			element.className += ' visible';
		}
	}
}
function hideElement(element){
	if (element != null) {
		if (element.className.indexOf('visible') != -1) {
			element.className = element.className.replace('visible','');
		}else if (element.className.indexOf('hidden') == -1) {
			element.className += ' hidden';
		}
	}
}
function stepUnhideElement(element){
	if (element != null && element.className.indexOf('hidden') != -1){
		element.className = element.className.replace('hidden','');
	}
}
function stepHideElement(element){
	if (element != null) {
		element.className += ' hidden';
	}
}
function saveCheckboxState(evt) {
	if (evt.currentTarget.checked) {
		storeData(evt.currentTarget.id, true);
	} else {
		localStorage.removeItem(evt.currentTarget.id);
	}
}
function toggleDisplayCSS(evt){
	var e = document.getElementsByClassName(evt.currentTarget.getAttribute('data-class'));
	if(evt.currentTarget.checked){
		for(var i=0,z=e.length;i<z;i++){
            e[i].className += ' hidden';
		}
	}else{
		for(var i=0,z=e.length;i<z;i++){
			e[i].className = e[i].className.replace(' hidden','');
		}
	}
}
function toggleFilters(evt){
	var filters = document.getElementsByTagName('aside')[0];
	var arrow = document.getElementById('arrow');
	if (arrow.className.indexOf('rotated') == -1) {
		showElement(filters);
		arrow.className += ' rotated';
	} else {
		hideElement(filters);
		arrow.className = arrow.className.replace('rotated','');
	}
}
function showSubmitBox(evt){
	document.getElementById('plugin').textContent=evt.currentTarget.textContent;
	showElement(document.getElementById('overlay'));
}
function hideSubmitBox(evt){
	var output = document.getElementById('output');
	hideElement(document.getElementById('overlay'));
	hideElement(output);
	showElement(document.getElementById('submitBox').getElementsByTagName('form')[0][2]);
	output.innerHTML='';
}
function submitPlugin(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	if (evt.currentTarget[0].value.length == 0 && evt.currentTarget[1].value.length == 0){
        var output = document.getElementById('output');
        output.textContent = txt9;
        showElement(output);
		return;
	} else if (isValidationSupported() && !evt.currentTarget.checkValidity()){
		return;
	}
    if (evt.currentTarget[0].value.length > 0) {
        /* Add link with Markdown hyperlinking. */
        comment = '<' + evt.currentTarget[0].value + '>\n\n';
    }
	comment += evt.currentTarget[1].value;
    pluginName = document.getElementById('plugin').textContent;
	outputPluginSubmitText(txt1);
    gh.searchIssues(pluginName + ' in:title repo:' + repos[gameName].owner + '/' + repos[gameName].repo).then(function(issues){
        /* These issues may contain partial matches, so check returned issues. */
        for (var i = 0; i < issues.items.length; ++i) {
            if (issues.items[i].title.toLowerCase() === pluginName.toLowerCase()) {
                var issue = new Issue(repos[gameName].owner, repos[gameName].repo, issues.items[i].number);
                /* Check to make sure the proposed comment isn't a duplicate. */
                issue.getComments().then(function(comments){
                    for (var j = 0; j < comments.length; ++j) {
                        if (comments[j].body.toLowerCase() == comment.toLowerCase()) {
                            outputPluginSubmitText(txt2);
                            return;
                        }
                    }
                    issue.createComment(comment).then(function(data){
                        outputPluginSubmitText(txt3);
                    });
                });
                return;
            }
        }
        if (issues.total_count == 0) {
            console.log('No matching submissions.');
            /* No matching issues found. Create a new issue. */
            var repo = gh.getRepo(repos[gameName].owner, repos[gameName].repo);
            repo.createIssue(pluginName, {body: comment}).then(function(data){
                console.log(data);
                outputPluginSubmitText(txt4);
            });
        }
    }).catch(function(err){
        /* err has members '_jqXHR' (an XHR object), 'status' (a HTTP return code) and 'error' (which has members 'message' and 'documentation_url'). */
        if (err && err.status) {
            /* 401 for authentication failure. */
            if (err.status == 401 || err.status == 404) {
                outputPluginSubmitText(txt5, true);
            }
            /* 403 for rate limit exceeded, or many authentication failures. */
            else if (err.status == 403) {
                var time = err._jqXHR.getResponseHeader('X-RateLimit-Reset');
                if (time) {
                    /* Rate limit exceeded. */
                    var date = new Date(parseInt(time, 10) * 1000);
                    outputPluginSubmitText(txt6.substring(0, txt6.length - 4) + date.toTimeString() + '.', true);
                } else {
                    /* Auth failure. */
                    outputPluginSubmitText(txt6, true);
                }
            } else {
                outputPluginSubmitText(txt7 + ' GitHub error message: ' + JSON.parse(err.error).message, true);
            }
        }
    });
}
function showSection(evt){
	showElement(document.getElementById(evt.currentTarget.getAttribute('section') == 'summary' || evt.currentTarget));
	hideElement(document.querySelector('section.visible'));
	showElement(document.getElementById(evt.currentTarget.getAttribute('data-section')));
	var elem = document.querySelector('nav div.current');
	if (elem != null){
		elem.className = elem.className.replace('current', '');
	}
	if (evt.currentTarget.className.indexOf('current') == -1) {
		evt.currentTarget.className += ' current';
	}
	/*Also enable/disable filters based on current page.*/
	var elemArr = document.getElementsByTagName('aside')[0].getElementsByTagName('input');
	for (var i=0, z=elemArr.length;i<z;i++){
		if (elemArr[i].id  == 'hideVersionNumbers' && (evt.currentTarget.getAttribute('data-section') == 'summary' || evt.currentTarget.getAttribute('data-section') == 'summary' || evt.currentTarget.getAttribute('data-section') == 'summary')){
			elemArr[i].disabled = true;
		} else if (elemArr[i].id  == 'hideActiveLabel' && (evt.currentTarget.getAttribute('data-section') == 'summary' || evt.currentTarget.getAttribute('data-section') == 'summary' || evt.currentTarget.getAttribute('data-section') == 'summary')){
			elemArr[i].disabled = true;
		} else if (elemArr[i].id  == 'hideChecksums' && (evt.currentTarget.getAttribute('data-section') == 'summary' || evt.currentTarget.getAttribute('data-section') == 'summary' || evt.currentTarget.getAttribute('data-section') == 'summary')){
			elemArr[i].disabled = true;
		} else if (evt.currentTarget.getAttribute('data-section') == 'summary'){
			elemArr[i].disabled = true;
		} else {
			elemArr[i].disabled = true;
		}
	}
}
function toggleMessages(evt){
	var listItems = document.getElementById('recPlugins').getElementsByTagName('li');
	var i = listItems.length - 1;
	var hiddenNo = parseInt(document.getElementById('hiddenMessageNo').textContent);
	while (i>-1){
		var spans = listItems[i].getElementsByTagName('span');
		if (spans.length == 0 || spans[0].className.indexOf('mod') == -1){
			var filterMatch = false;
			if (evt.currentTarget.id == 'hideAllPluginMessages'){
				filterMatch = true;
			} else if (evt.currentTarget.id == 'hideNotes' && listItems[i].className.indexOf('note') != -1){
				filterMatch = true;
			} else if (evt.currentTarget.id == 'hideBashTags' && listItems[i].className.indexOf('tag') != -1){
				filterMatch = true;
			} else if (evt.currentTarget.id == 'hideRequirements' && listItems[i].className.indexOf('req') != -1){
				filterMatch = true;
			} else if (evt.currentTarget.id == 'hideIncompatibilities' && listItems[i].className.indexOf('inc') != -1){
				filterMatch = true;
			} else if (evt.currentTarget.id == 'hideDoNotCleanMessages' && listItems[i].className.indexOf('dirty') != -1 && (listItems[i].textContent.indexOf('Do not clean.') != -1 || listItems[i].textContent.indexOf(txt10) != -1)){
				filterMatch = true;
			}
			if (filterMatch){
				if (evt.currentTarget.checked){
					if (listItems[i].className.indexOf('hidden') == -1){
						hiddenNo++;
					}
					stepHideElement(listItems[i]);
				} else {
					stepUnhideElement(listItems[i]);
					if (listItems[i].className.indexOf('hidden') == -1){
						hiddenNo--;
					}
				}
			}
		}
		i--;
	}
	document.getElementById('hiddenMessageNo').textContent = hiddenNo;
	var event = document.createEvent('Event');
	event.initEvent('click', true, true);
	document.getElementById('hideMessagelessPlugins').dispatchEvent(event);
}
function togglePlugins(evt){
	var plugins = document.getElementById('recPlugins').getElementsByTagName('ul')[0].childNodes;
	var i = plugins.length - 1;
	var hiddenNo = parseInt(document.getElementById('hiddenPluginNo').textContent);
	while (i>-1){
		if (plugins[i].nodeType == Node.ELEMENT_NODE){
			var isMessageless = true,
			isInactive = false,
			isClean = true;
			var messages = plugins[i].getElementsByTagName('li');
			var j = messages.length - 1;
			while (j > -1){
				if (messages[j].className.indexOf('hidden') == -1){
					isMessageless = false;
					break;
				}
				j--;
			}
			if (plugins[i].getElementsByClassName('active').length != 0){
				isInactive = false;
			}
			if (plugins[i].getElementsByClassName('dirty').length != 0){
				isClean = false;
			}
			if ((document.getElementById('hideMessagelessPlugins').checked && isMessageless)
				|| (document.getElementById('hideInactivePlugins').checked && isInactive)){
				if (plugins[i].className.indexOf('hidden') == -1){
					hiddenNo++;
					hideElement(plugins[i]);
				}
			} else if (plugins[i].className.indexOf('hidden') != -1){
					hiddenNo--;
					showElement(plugins[i]);
			}
		}
		i--;
	}
	document.getElementById('hiddenPluginNo').textContent = hiddenNo;
}
function outputPluginSubmitText(text, isError) {
	var output = document.getElementById('output');
    if (isError) {
        output.style.color = 'red';
    }
    output.textContent = text;
    hideElement(document.getElementById('submitBox').getElementsByTagName('form')[0][2]);
	showElement(output);
}
function showBrowserBox(){
	if (isPluginSubmitSupported()) {
		document.getElementById('pluginSubmitSupport').className = 't';
	} else {
		document.getElementById('pluginSubmitSupport').className = 'c';
	}
	if (isStorageSupported()) {
		document.getElementById('memorySupport').className = 't';
	} else {
		hideElement(document.getElementById('browserBox').querySelector('label'));
		document.getElementById('memorySupport').className = 'c';
	}
	if ('placeholder' in document.createElement('input')) {
		document.getElementById('placeholderSupport').className = 't';
	} else {
		document.getElementById('placeholderSupport').className = 'c';
	}
	if (isValidationSupported()) {
		document.getElementById('validationSupport').className = 't';
	} else {
		document.getElementById('validationSupport').className = 'c';
	}
    var summaryButton = document.getElementsByTagName('nav')[0].getElementsByClassName('button')[0];
    if (summaryButton.className.indexOf('current') == -1){
        summaryButton.className += ' current';
    }
    showElement(document.getElementsByTagName('section')[0]);
}
function loadSettings(){
    for (var i = localStorage.length - 1; i > -1; --i) {
		var elem = document.getElementById(localStorage.key(i));
		if (elem != null && 'defaultChecked' in elem) {
			elem.checked = false;
			var event = document.createEvent('Event');
			event.initEvent('click', true, true);
			elem.dispatchEvent(event);
		}
	}
}
function setupEventHandlers(){
	var i, elemArr;
	if (isStorageSupported()){  /*Set up filter value and CSS setting storage read/write handlers.*/
		elemArr = document.getElementsByTagName('aside')[0].getElementsByTagName('input');
		i = elemArr.length - 1;
		while(i > -1){
			elemArr[i].addEventListener('click', saveCheckboxState, true);
			i--;
		}
	}
	if (isPluginSubmitSupported() && document.getElementById('unrecPlugins') != null){  /*Set up handlers for plugin submitter.*/
		elemArr = document.getElementById('unrecPlugins').querySelectorAll('span.mod');
		i = elemArr.length - 1;
		while(i > -1){
			elemArr[i].addEventListener('click', showSubmitBox, true);
			i--;
		}
		document.getElementById('submitBox').getElementsByTagName('form')[0].addEventListener('reset', hideSubmitBox, false);
		document.getElementById('submitBox').getElementsByTagName('form')[0].addEventListener('submit', submitPlugin, false);
	}
	document.getElementById('filtersButtonToggle').addEventListener('click', toggleFilters, false);
	/*Set up handlers for section display.*/
	elemArr = document.getElementsByTagName('nav')[0].querySelectorAll('nav > div.button');
	var i = elemArr.length - 1;
	while(i > -1){
		elemArr[i].addEventListener('click', showSection, true);
		i--;
	}
	document.getElementById('supportButtonShow').addEventListener('click', showSection, true);
	/*Set up handlers for filters.*/
	document.getElementById('hideVersionNumbers').addEventListener('click', toggleDisplayCSS, false);
	document.getElementById('hideActiveLabel').addEventListener('click', toggleDisplayCSS, false);
	document.getElementById('hideChecksums').addEventListener('click', toggleDisplayCSS, false);
	document.getElementById('hideNotes').addEventListener('click', toggleMessages, false);
	document.getElementById('hideBashTags').addEventListener('click', toggleMessages, false);
	document.getElementById('hideRequirements').addEventListener('click', toggleMessages, false);
	document.getElementById('hideIncompatibilities').addEventListener('click', toggleMessages, false);
	document.getElementById('hideDoNotCleanMessages').addEventListener('click', toggleMessages, false);
	document.getElementById('hideAllPluginMessages').addEventListener('click', toggleMessages, false);
	document.getElementById('hideInactivePlugins').addEventListener('click', togglePlugins, false);
	document.getElementById('hideMessagelessPlugins').addEventListener('click', togglePlugins, false);
}
function applyFeatureSupportRestrictions(){
	if (!isPluginSubmitSupported() && document.getElementById('unrecPlugins')) { /*Disable unrecognised mod underline effect.*/
		var buttons = document.getElementById('unrecPlugins').querySelectorAll('span.mod');
		for (var i=0, len=buttons.length; i < len; i++) {
			buttons[i].className += 'nosubmit';
		}
		hideElement(document.getElementById('unrecPluginsSubmitNote'));
	}
	if (isStorageSupported()) {
		hideElement(document.getElementById('loseSettingsClose'));
	} else {
		hideElement(document.getElementById('loseSettingsCacheClear'));
	}
}
function init(){
	setupEventHandlers();
	if (isStorageSupported()){
		loadSettings();
	}
	applyFeatureSupportRestrictions();
	/*Initially disable all filters.*/
	var elemArr = document.getElementsByTagName('aside')[0].getElementsByTagName('input');
	for (var i=0, z=elemArr.length;i<z;i++){
		elemArr[i].disabled = false;
	}
	showBrowserBox();
}
init();